植物工場向けラズパイチュートリアル　　2021/06/23

１．キーボードの確認をしよう
Geanyを起動
ラズパイー＞プログラミングー＞Geany
半角/全角キーでアルファベット、カナが切り替わるか確認
タスクトレイ（右上）に”あ”というアイコンがあるか確認しょう
タブ数を確認しよう。TAB=4半角スペースになっているか？
なっていない場合は次のようにして設定する
メニューー＞編集ー＞設定
エディター＞インデント
幅=4、形式=空白
適応
メニュープロジェクトー＞標準インデントを適応



２．SDカードの負荷軽減設定をしよう

LXTerminalを起動、以下コマンドを入力（スーパーユーザ権限でnanoというエディタソフトを使ってetcフォルダのfstabというファイルを編集）
$ sudo nano /etc/fstab
以下の２行を追加
tmpfs  /tmp  tmpfs  defaults,size=256m,noatime,mode=1777  0  0
tmpfs  /var/tmp  tmpfs  defaults,size=16m,noatime,mode=1777  0  0
終了し保存（ Ctrl + x　->  y )
これでtmpフォルダと/var/tmpフォルダがSDカードから内部メモリに配置が変更になった

LXTerminalに以下コマンドを入力
$ sudo nano /etc/rsyslog.conf
不要なログ保存処理を削除する（#でコメントアウト）
/********************************************************************/
daemon.*                       -/var/log/daemon.log
kern.*                         -/var/log/kern.log
lpr.*                          -/var/log/lpr.log
mail.*                         -/var/log/mail.log
user.*                         -/var/log/user.log

mail.info                      -/var/log/mail.info
mail.warn                      -/var/log/mail.warn
mail.err                       /var/log/mail.err

*.=debug;\
       auth,authpriv.none;\
       news.none;mail.none     -/var/log/debug
/********************************************************************/




３．gpioコマンド使ってみよう
ラズパイの各ポートの状態確認、制御が出来る。LXTerminalから以下コマンドを入力
$ sudo gpio readall
失敗するはず。
gpioコマンドが使えるようにするためWiringPiをアップデート
LXTerminalを起動、以下コマンドを入力
$ cd /tmp
$ wget https://project-downloads.drogon.net/wiringpi-latest.deb
$ sudo dpkg -i wiringpi-latest.deb
$ sudo rm wiringpi-latest.deb
$ sudo gpio readall
 +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |
 |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5v      |     |     |
 |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |
 |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | IN   | TxD     | 15  | 14  |
 |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |
 |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |
 |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |
 |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |
 |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |
 |  10 |  12 |    MOSI |   IN | 0 | 19 || 20 |   |      | 0v      |     |     |
 |   9 |  13 |    MISO |   IN | 0 | 21 || 22 | 1 | IN   | GPIO. 6 | 6   | 25  |
 |  11 |  14 |    SCLK |   IN | 0 | 23 || 24 | 1 | IN   | CE0     | 10  | 8   |
 |     |     |      0v |      |   | 25 || 26 | 1 | IN   | CE1     | 11  | 7   |
 |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |
 |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |
 |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |
 |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |
 |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |
 |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |
 |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+

SensorHATを使っているので、むやみにポートを制御して良いわけではない
以下、SensorHATの回路図
　https://www.raspberrypi.org/documentation/hardware/sense-hat/images/Sense-HAT-V1_0.pdf
回路図を見るとSensorHATは各モジュールとI2C通信を行って制御していることが分かる。

GPIO7が空きポートなのでGPIO7を制御する
BCM（コアチップ）番号でポートを指定します。
GPIO7のBCM番号は4になる
LXTerminalから以下コマンドを入力
$ gpio -g mode 4 out  #BMC4（GPIO7）OUT設定
$ gpio readall        #確認
$ gpio -g write 4 1   #HIGH(1)出力
$ gpio -g read 4      #読み込み
$ gpio -g write 4 0   #LOW(0)出力
$ gpio -g read 4      #読み込み
$ gpio -g mode 4 in   #BMC4（GPIO7）IN設定




４．I2Cの接続を確認
LXTerminalから以下コマンドを入力、アドレスMAPを表示する
$ i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- 1c -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- UU -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- 5c -- -- 5f 
60: -- -- -- -- -- -- -- -- -- -- 6a -- -- -- -- -- 
70: -- -- -- -- -- -- -- --   

0x1c = LSM9DS1: Accelerometer and gyroscope
0x5c = LPS25H: EMS pressure sensor: 260-1260 hPa absolute digital output barometer
0x5f = HTS221: Capacitive digital sensor for relative humidity and temperature
0x6a = LSM9DS1: Magnetic sensor
0x46 = ATTINY88-MUR: UUとなっているがカーネルドライバ。LEDマトリクスとジョイスティックを制御するAVRマイコンに接続


５．カメラの確認
ラズパイカメラを有効にする。LXTerminalから以下コマンドを入力
$ sudo raspi-config
 Interfacing Options -> Camera -> Enable
カメラの確認。LXTerminalから以下コマンドを入力
$ vcgencmd get_camera
 supported=1 detected=1
 1=successつまりサポートも検出もできている
カメラ撮影の確認。LXTerminalから以下コマンドを入力 
$ sudo raspistill -o image.jpg
実行したフォルダにカメラ撮影した画像をimage.jpgとして保存できたらOK



６．チュートリアルフォルダを作成する
LXTerminalから以下コマンドを入力
$ cd ~
$ mkdir Work
$ cd Work
$ mkdir Tutorial
左上のファイルマネージャーを起動し、フォルダが作成されていることを確認する



７．ダウンロードしたチュートリアルファイルをWorkフォルダにコピーする
ファイルマネージャーを使ってコピーしても良いし、コマンドcpを使ってコピーしても良い
$ cp -a /home/pi/ダウンロード/Tutorial /home/pi/Work



８．SensorHATを使ってPythonプログラムを動かそう
以下のファイルをクリックする
/home/pi/Work/Tutorial/SensorHat/1_OutputTemperature.py
アプリケーションTonny IDEが起動

Runボタンで実行
Shellウィンドウに温度、湿度、気圧が出力される
Stopボタンで停止

デバッグボタンでデバッグ開始
６行目にブレークポイントを設定する
　ブレークポイントを設定（行番号をダブルクリック）
　ブレークポイントを解除（行番号をダブルクリック）
Resumeボタンでブレークポイントまで実行する
Over、Intoボタンで処理を１行進める
    Over    １行進める    
    Into    関数なら中に関数内に入る。ただし、現在の設定では自身が作成した関数以外には入れない
Variableウィンドウで変数の値が確認できることを確認する
Stopボタンで停止

print文、sleep関数の引数を変えて保存し、実行する
（文法間違えてエラーを出すのも例として良い）



９．SensorHATシミュレータを使ってみる
以下変更をする
from sense_hat import SenseHatー＞from sense_emu import SenseHat
エミュレータを起動する
ラズパイー＞プログラミングー＞Sense HAT Emulator
Runボタンで実行
Shellウィンドウに温度、湿度、気圧が出力される
エミュレータのTemperature、Humidity、Pressureバーを変化させると温度、湿度、気圧も変化する
Stopボタンで停止



１０．VSCodeをインストールする
Thonny IDEは使いにくいのでVSCodeを使う

LXTerminalから以下コマンドを入力
$ sudo apt install code -y
ラズパイー＞プログラミングー＞Visual Studio Codeを選択
Extensionという機能を使ってをpython、Jaspaneseインストールする
左のExtensionアイコンをクリックするかCtrl+Shift+XでExtensionを実行
検索から以下を探しinstallボタンをクリックしインストールする
 Python 2021 @ Microsoft
 Japanese Language Pack for Visual Studio Code 1.51.2
左下にリスタートボタンが表示されるのでクリック


１１．VSCodeでファイルを開く
/home/pi/Work/Tutorial/SensorHat/1_OutputTemperature.py
デバッグする
各種センサのデバッグも行う
/home/pi/Work/Tutorial/SensorHat/2_OutputGyroscope.py
/home/pi/Work/Tutorial/SensorHat/3_OutputAccelerometer.py
/home/pi/Work/Tutorial/SensorHat/4_OutputMagnetometer.py
参考
https://deviceplus.jp/hobby/raspberrypi_entry_045/


１２．Sensor HAT LED出力を行う
VSCodeでファイルを開く
/home/pi/Work/Tutorial/SensorHat/5_SayHello.py
デバッグする


１３．Helloプログラムを起動時に自動で行う
LXTerminalから以下コマンドを入力
$ sudo nano /etc/rc.local
"exit 0"の前に以下追記
python3 /home/pi/Work/Tutorial/SensorHat/5_SayHello.py
終了し保存（ Ctrl + x　->  y )
ラズパイを再起動し、Helloと表示されるか確認


１４．VSCodeで構成を行う
今までファイル単体で実行してきたが、デバッグ時に実行形式を選んだり不便
フォルダを開き構成管理できるようにする
フォルダを開くで以下フォルダを開く
/home/pi/Work/Tutorial/VSCode/1.SaySomething
エクスプローラで.vscodeを一旦削除
エクスプローラで1.SaySomethingを選択し、
メニューー＞実行ー＞構成の追加を選択し、pythonを選択
エクスプローラで.vscodeが新規作成される
.vscode内のlaunch.jsonファイルが開くので、"console": "integratedTerminal"の前にに以下２行を追加
            "justMyCode": false,                #追加
            "args": ["Hello"],                  #追加
            "console": "integratedTerminal"
            
"justMyCode": falseでimportしたコードもデバッグ出来るようになる
"args": ["Hello"]は実行前にプログラムに渡す引数を指定している

１５．他のSensorHatのコードを実行する
/home/pi/Work/Tutorial/SensorHatをフォルダで開き、構成を追加する。
"justMyCode": falseのみ追加
以下を実行する
6_PixelControl.py
7_Dispay1Charactor.py
8_OutputJoyStick.py
9_DispayJoyStick.py

１６．
Windows PC-ラズパイ間でBluetoothファイル転送するため、ラズパイにbluemanをインストールする
$ sudo apt install blueman
再起動。タスクトレイにBluetoothのアイコンが２つできる。丸いほうがblueman。

<ペアリング>
ラズパイ側のbluemanをクリックしコンテキストメニューを開く、”発見を可能にする”を選択
Windows PC側ではタスクトレイのBluetoothアイコンをクリックし”Bluetoothデバイスの追加”を選択する
（タスクトレイにBluetoothアイコンないのならWindowsメニュー->設定->デバイスを選択）
”Bluetoothまたはその他のデバイスを追加する”をクリックする
しばらくするとraspberrypiが見つかるので選択する
ペアリングを行い、接続時は常に許可を選択　
ペリング完了

<ラズパイからPCにファイルを送る>
Windows PC側ではタスクトレイのBluetoothアイコンをクリックし”ファイルの受信”を選択する
（タスクトレイにBluetoothアイコンないのならWindowsメニュー->設定->デバイスを選択後に、”Bluetoothでファイルを送信、受信する”->"ファイルを受信する"を選択）
ラズパイ側のbluemanをクリックしコンテキストメニューを開く、”デバイスにファイルを送信”を選択
ラズパイ側でファイルを選択し、デバイスを選択する
Windows PC側で保存フォルダを選択し、完了ボタンを押下するとファイル転送が終了する

注意
ラズパイが音声デバイスとして認識されるため、接続しっぱなしだとPCとスピーカやマイクが使えなくなる
転送が終了したら忘れずラズパイ側のbluemaでTurn Bluetooth Offする

１７．カメラを使ったプログラムをデバッグする
/home/pi/Work/Tutorial/Camera
必要ライブラリをインストールする
$ cd /home/pi/Work/Tutorial/Camera
$ sudo ./opencv_install.sh
opencv_install.shはシェルスクリプト。スクリプト内にはライブラリインストールの処理が記載されている
実行するには./が必要（誤実行防止のため）

OpenCvを使ってカメラ画像を表示しよう
1_DisplayCamera
OpenCvを使ってカメラ画像を保存しよう
2_SaveMovie.py
OpenCvを使って丸を描画しよう
3_WriteCircle cv2.py
OpenCvを使ってトラックバーを表示しよう
4_TrackBar.py
トラックバーを使ってカメラ画像の色を変化させよう
5_TrackBarContorlCamera.py
OpenCvを使って静止画を様々な色空間で表示させよう
6_DispalyPicture.py
OpenCvの輪郭検出を使ってタピオカを検出しよう
7_DetectTapioka.py
OpenCvの（円）特徴検出を使ってタピオカを検出しよう
8_DetectTapioka2.py

１８．Coralを使ったプログラムをデバッグする
/home/pi/Work/Tutorial/Coral
必要ライブラリをインストールする
$ cd /home/pi/Work/Tutorial/Coral
$ sudo ./EdgeTpuRuntime_install.sh

チュートリアル１〜3は以下URLに従って行う
https://coral.ai/docs/accelerator/get-started

鳥の静止画から鳥の名前を推定しよう
1_ClassifyBirds
植物の静止画から植物の名前を推定しよう
2_ClassifyPlant
虫の静止から虫の名前を推定しよう
3_ClassifyInsect

チュートリアル4〜5は以下URLに従って行う
https://coral.ai/examples/
↓リンク
https://github.com/google-coral/examples-camera
↓リンク
https://github.com/google-coral/examples-camera/tree/master/opencv

顔検出をしよう
4_FaceDetect
物体検出をしよう
5_ObjectDetect
本サンプルコードはデフォルトで以下のモデルを使用
  mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite 
  mobilenet ssd v2は物体検出で検出できるラベルは90種類
自身でモデルを作成することも可能
  TensorFlow Liteモデル（.tflite file）を作成
  Edge TPU CompilerでEdge TPUと互換性のあるファイルにコンパイルする
  マニュアル https://coral.ai/docs/edgetpu/compiler/#system-requirements
  日本語説明 https://qiita.com/huayecai/items/b7f53cbd5be19470394a

写真データからモデルを作ろう
6_MakeAnimalModel
<注意>
ラズパイでは手順(36)でインストールするライブラリがサポートされていません（その前に手順(34)で失敗してしまう）。
そもそも学習は処理不可が重いのでラズパイでの実行はそもそも推奨されていません。
今回は最新のTensorflowが用意されているGoogleのColaboratoryを使います。
Colaboratoryを使うにはGoogleアカウントが必要です。

<Colaboratoryを使う方法>
(1)以下のURLにアクセス
https://colab.research.google.com/notebooks/intro.ipynb?hl=ja
(2)メニューのファイル->ノートブックを新規作成を選択します。
　左上のUntitled0.ipynbを選択し、ファイル名を変更します。
　例　20210621_PlantFactoryTutorial.ipynb
　すでにファイルを作成している場合はファイル->ファイルを開くで作成したファイルを選択してください。
(3)以下手順でGPU設定をします。すでにGPU設定している場合は手順をスキップしてください。
　メニューのランタイム->ランタイムのタイプを変更を選択、ハードウェアアクセラレータをNoneからGPUに変更し、保存ボタンを押下します。
　　ハードウェアアクセラレータをGPUにしていないと処理時間がかかってしまいます
(4)以下手順でドライブのマウントを行います。すでにドライブのマウントしている場合は手順をスキップしてください。
　左のフィアルアイコンを押下し、フォルダツリーを表示し、ドライブのマウントアイコンを押下します
(5)以下手順で実行フォルダをGoogleドライブ内に作成します。すでに実行フォルダを作成している場合は手順をスキップしてください。
　コード欄に以下を入力してshift＋enterで実行します。
/***************************************************************/
%mkdir /content/drive/MyDrive/PlantFactoryTutorial
/***************************************************************/
(6)以下手順で実行フォルダに移動します。
　コード欄に以下を入力してshift＋enterで実行します。
/***************************************************************/
%cd /content/drive/MyDrive/PlantFactoryTutorial
/***************************************************************/
(7)コード欄に以下を入力してshift＋enterで実行します。
Colaboratory90分何もしない、または12時間経過でリセットされます。リセットされるとインストールしたライブラリも消えてしまうので再度インストールしてください。
/***************************************************************/
%pip install icrawler
/***************************************************************/
icrawlerは画像検索をWeb検索しダウンロードしてくれるPythonライブラリです。
モデルの写真データをWebから集めるのに便利です。
(8)コード欄に以下ファイルの内容を入力してshift＋enterで実行します
　1_getPictue.py
猫犬の画像をダウンロードする。実行が完了すると実行アイコンの"グルグル"が止まります
左のファイルアイコンをクリックし、cat, dogフォルダが出来ており、写真データが入っていることを確認します
(9)コード欄に以下ファイルの内容を入力してshift＋enterで実行します
　2_makeData.py
ダウンロードした写真を加工します
左のファイルアイコンをクリックし、dog_cat.npyが出来ていることを確認します
(10)コード欄に以下ファイルの内容を入力してshift＋enterで実行
　3_makeModel.py
写真データから機械学習モデルを作成します
左のファイルアイコンをクリックし、cnn.h5が出来ていることを確認します
(11)コード欄に以下ファイルの内容を入力してshift＋enterで実行
　4_convertTflite.py
Tfliteファイルに変換します。変換したファイルはcnn.tfliteという名前で保存されます。
cnn.tfliteはedge TPU（Coral)用のファイルには変更できません
(12)コード欄に以下ファイルの内容を入力してshift＋enterで実行
　5_convertTflite.py
整数量子化してTfliteファイルに変換します。。変換したファイルはcnn_IntegerQuantization_edgetpu.tfliteという名前で保存されます
cnn_IntegerQuantization_edgetpu.tfliteはedge TPU（Coral)用のファイルには変更できます
(13)コード欄に以下を入力してshift＋enterで実行
/***************************************************************/
!curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
!echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | tee /etc/apt/sources.list.d/coral-edgetpu.list
!apt-get update
!apt-get install edgetpu-compiler	
/***************************************************************/
(14)コード欄に以下を入力してshift＋enterで実行
/***************************************************************/
!edgetpu_compiler cnn_IntegerQuantization.tflite
/***************************************************************/
(15)左のファイルアイコンをクリックし、以下ファイルが出来ていることを確認します
　cnn.tflite
　cnn_IntegerQuantization.tflite
　cnn_IntegerQuantization_edgetpu.tflite
ファイル表示がすぐに更新されないことがあります、そういう時は一度ファイル欄を閉じて再度開きましょう
(16)以下ファイルをダウンロードします。ファイル欄のファイル右横をクリックし、ダウンロードを選択します
　cnn.tflite
　cnn_IntegerQuantization.tflite
　cnn_IntegerQuantization_edgetpu.tflite
ダウンロードした上記ファイルを次チュートリアルの7_ClassifyAnimalフォルダに移動しましょう。
以上でチュートリアル6_MakeAnimalModelは終了です。
以下ラズパイでの実行方法を参考に記載します。手順(34)で失敗しますので注意が必要です

<ラズパイで実行（手順(34)で失敗するので注意）>
(21)ターミナルを起動し以下コマンドで実行フォルダを変える
$ cd /home/pi/Work/PlantFactory/Tutorial/Coral/6_MakeAnimalModel
(22)ターミナルで以下コマンドを実行し、icrawlerをインストールします
$ ./0_install_icrawler.sh
(23)以下実行しvirtualenvをインストールする
$ sudo pip3 install virtualenv
virtualenvは仮想python環境を作れるライブラリです。
tensorflowをインストールすると現在の開発環境を壊してしまうので仮想環境を作ります。
(24)仮想環境を作ります
$ virtualenv env
$ source env/bin/activate
(25)Tensorflowをダウンロードします。
$ wget "https://raw.githubusercontent.com/PINTO0309/Tensorflow-bin/master/tensorflow-2.5.0-cp37-none-linux_armv7l_numpy1195_download.sh"
$ sudo chmod 777 tensorflow-2.5.0-cp37-none-linux_armv7l_numpy1195_download.sh
$ ./tensorflow-2.5.0-cp37-none-linux_armv7l_numpy1195_download.sh
(26)Tensorflowに必要なライブラリをインストール準備します
$ sudo nano /etc/apt/sources.list
# deb-src の行の先頭の # を削除する
(27)Tensorflowに必要なライブラリをインストールします
$ sudo apt-get update; sudo apt-get dist-upgrade で古いパッケージを更新する
$ sudo apt-get -y install curl python3-protobuf python3-termcolor python3-yaml python3-pydot python3-pyasn1 python3-pyasn1-modules python3-rsa python3-markdown python3-cachetools python3-future python3-dill python3-tqdm python3-pil python3-pip python3-wheel python3-setuptools python3-matplotlib python3-h5py python3-scipy python3-grpcio python3-requests-oauthlib python3-werkzeug python3-wrapt
$ sudo apt-get build-dep h5py grpc python-wrapt
$ sudo apt-get build-dep numpy || sudo apt-get build-dep python-numpy
$ pip3 install numpy==1.19.5 && (CC=mpicc CXX=mpic++ pip3 install h5py==3.1.0) || pip3 install h5py==3.1.0
$ sudo apt-get purge python3-wrapt 
$ pip3 install -I pip 
(28)Tensorflowをインストールします
$ python3 -m pip install tensorflow-hub tensorflow-datasets tensorflow-2.5.0-cp37-none-linux_armv7l.whl
(29)インストール終了したらターミナルを閉じます
(30)ターミナルを起動し以下コマンドで実行フォルダを変え、仮想環境を立ち上げる
$ cd /home/pi/Work/PlantFactory/Tutorial/Coral/6_MakeAnimalModel
$ source env/bin/activate
(31)1_getPictue.pyを実行し猫と犬の写真を集めます。本プログラム内ではicrawlerを使っています
$ python3 1_getPictue.py
　写真はcat、dogフォルダに入ります。
(32)2_makeData.pyを実行し、写真データを加工します
$ python3 2_makeData.py
　加工したデータはdog_cat.npyという名前で保存されます
(33)3_makeModel.pyを実行し、モデルを作ります
$ python3 3_makeModel.py
　作成したモデルはcnn.h5という名前で保存されます
(34)4_convertTflite.pyを実行しTfliteファイルに変換します
$ python3 4_convertTflite.py
　変換したファイルはcnn.tfliteという名前で保存されます
　cnn.tfliteはedge TPU（Coral)用のファイルには変更できません
(35)5_convertTflite.pyを実行し、整数量子化してTfliteファイルに変換します
$ python3 5_convertTflite.py
　変換したファイルはcnn_IntegerQuantization_edgetpu.tfliteという名前で保存されます
　cnn_IntegerQuantization_edgetpu.tfliteはedge TPU（Coral)用のファイルには変更できます
(36)6_install_edgetpu-compiler.shを実行し、TPU（Coral)用ファイル変換ライブラリをインストールします
$ ./6_install_edgetpu-compiler.sh
(37)7_excute_edgetpu-compiler.shを実行し、TPU（Coral)用ファイル変換を行います
$ ./7_excute_edgetpu-compiler.sh
変換されたファイルはcnn_IntegerQuantization_edgetpu.tfliteという名前で保存されます

6で作ったモデルを使って犬、猫を検出しよう
7_ClassifyAnimal
Coralなし検出。モデルはcnn.tfliteを使用。
7_ClassifyAnimalWithoutCoral.py
Coralあり検出。モデルはcnn_IntegerQuantization_edgetpu.tfliteを使用。
7_ClassifyAnimal.py

１９．Flaskを使ったプログラムをデバッグする
/home/pi/Work/Tutorial/Flask
Flask（フラスク）はPythonのWebアプリケーションフレームワークで、
小規模向けの簡単なWebアプリケーションを作るのに適しています。
PythonにはいくつものWebアプリケーションフレームワークがあります。
Djnago(ジャンゴ)やpyramid(ピラミッド)、bottleなどです。
簡単に学習出来る、軽量ということでFlaskを選択しています。

1_HelloWorld
ウェブブラウザにHelloWorldを表示するプログラムです
1_HelloWorld.pyを実行します。
Webブラウザを開き以下URLを入力します
 http://localhost:5000
Hello Worldと表示されていることを確認したらWebブラウザを閉じます
ターミナルを開き以下コマンドを入力します
$ ifconfig
ネットワーク情報を表示し、IPアドレスを取得します。
ラズパイを無線接続している人はwlan0項目のinet、以下例だと192.168.1.10をメモします
wlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255
ラズパイを優先接続している人はeth0項目のinet、以下例だと169.254.109.150をメモします
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 169.254.109.150  netmask 255.255.0.0  broadcast 169.254.255.255
ラズパイがつながっているネットワークのPCのブラウザを立ち上げます
（VPN経由の社内PCはNG、WiFi接続しているならスマフォでもOK）
　http://<メモしたIPアドレス>:5000
Hello Worldと表示されていることを確認したらWebブラウザを閉じます
1アクセスしか出来ないため、ラズパイ側のブラウザを開いていると、他端末での評価は出来ません。

2_UseHtmlTemplate
1_HelloWorld.pyではプログラム内に表示する文字を記載してました
図とかグラフを表示するためにhtmlを表示するプログラムを実行します。
フォルダ構成
　2_UseHtmlTemplate.py   Flaskプログラムファイルです
　templates              表示するhtmlファイルを保存するフォルダです
　static                 表示する図や写真を保存するフォルダです
プログラム内の@app.routeという記述は
URLとFlaskの処理を対応づけることで、URLと関数を紐付けることが出来きるルーティングコマンドです。
2_UseHtmlTemplateでは2つのルーティングコマンドがあります
@app.route("/")の次にはURL”http://<IPアドレス>:<ポート番号>/”で実行される関数を記載
@app.route("/index")の次にはURL”http://<IPアドレス>:<ポート番号>/index”で実行される関数を記載
文字列を返すとブラウザ側ではその文字列を表示します。
関数render_templateを返すとブラウザ側では引数のhtmlを表示します。

3_RealTimeGraph
サーバ（ラズパイ側）側で作ったグラフデータをWebSocketを使ってWebサーバでリアルタイムに表示更新します。
gevent、websocketをインストールする
$ ./Gevent_install.sh
geventはネットワークプログラミングのためのライブラリです。
geventはWSGI（Web Server Gateway Interface）をサポートします。
WSGIはアプリケーションとWebサーバのインタフェースを定義する規格になります。

WebSocketはWebサーバとWebブラウザの間で双方向通信できるようにするライブラリです。
htmlでWebブラウザを開いたあとはサーバ側はwebsocketを使ってグラフデータだけを送信します（JSON形式）。
Webブラウザはリアルタイムチャート作成にはd3.jsをベースにしたリアルタイムチャートライブラリであるEpochを使います。

＜プログラム内の動き＞
サーバはURL'/' が指定されると'index.html'を表示する
'index.html'内でブラウザがサーバに/publishを送信
サーバはURL'/publish'が指定されるとグラフデータをブラウザに送信する。1秒おきに繰り返して送信する
ブラウザはグラフデータを受けるとEpochで表示する

宿題
　送信しているデータをSenor HATの温度、湿度、気圧センサーの値に変更してください

4_CameraStreaming
カメラ動画をWebブラウザに表示します。
カメラ動画はOpenCvでフレームに切り取られてJPEG形式のバイナリデータで、
　レスポンスとして逐次送信されます(multipart/x-mixed-replaceを使用）。
multipart/x-mixed-replaceとは
HTTP応答によりサーバーが任意のタイミングで複数の文書を返し、紙芝居的にレンダリングを切り替えさせる仕組みです
JPEG形式のバイナリデータはgen関数内のyield関数で永遠に出力されます
yield関数は関数の処理を一旦停止して、戻り値を返すという処理を行います
return命令に似ていますが、return命令は処理を終了して戻り値を返すので、逐次処理は行なえません

5_CameraGraph
カメラ動画とグラフをWebブラウザに表示します。
3_RealTimeGraphと同じようにWebSocketを使ってWebブラウザにデータを送信します。
温度、湿度、写真をJSON形式にまとめて送信します。
JSONはJavaScript Object Notationで、標準的なテキストベースの構造データ表現フォーマットです。
情報に名前（キー）をつけ、階層構造で記述できます。
例　{{"name":"鈴木", "age":"27"}, {"name":"佐藤", "age":"19"}}

宿題
　カメラ動画を画像検出した画像に変更してください

6_SQL
sqlalchemyをインストールします
$ ./SqlalChemy_install.sh
SQLAlchemyはObject Relational Mapper（ORM)ライブラリです。
ORMはテーブルとクラスを1対1に対応させて，そのクラスのメソッド経由でデータを取得したり，変更したりできるようにする技術のことです。
以下URLのDAY4を参照
https://qiita.com/kiyokiyo_kzsby/items/0184973e9de0ea9011ed


２０．ＡＷＳを使ったプログラムをデバッグする
/home/pi/Work/Tutorial/AWS

(1)以下URLからAWSにログインする
https://745239123570.signin.aws.amazon.com/console
(2)以下URLからAWS IoTの設定画面を開く
https://console.aws.amazon.com/iot/home?region=us-east-1#/
右上の地域選択で以下を選択
　米国東部 (バージニア北部)us-east-1
(3)デバイスのポリシーを作成する
　左ウィンドウの"安全性"をクリックし、ツリーが開いたところで"ポリシー"をクリックする

　参考：
　ポリシーはデバイスに許可されるアクションを定義する
　　Connect　　接続
　　Publish　　メッセージの送信
　　Receive　　メッセージの受信
　　　などなど、詳細は以下URLを参照
　　　　https://docs.aws.amazon.com/ja_jp/iot/latest/developerguide/example-iot-policies-elements.html

(4)"作成"をクリックし、名前を入力する。名前はRaspi+自身の苗字+Policyとする
　例　橋本の場合　RaspiHashimotoPolicy
(5)項目"アクション"入力する
　　iot:Connect
(6)そうすると"リソース ARN"項目が自動で入力される
　arn:aws:iot:us-east-1:745239123570:client/replaceWithAClientId
　
　us-east-1　　　は　リージョンコード
　745239123570 　は　アカウントコード

(7)項目"効果"の有効チェックボックスにチェックを入れる
(8)本来、ステートメント追加をしていき、アクション、リソース ARN、効果を入力していくのだが面倒なので、
　一旦作成ボタンを押下し、後から編集する
(9)成功と表示されるので作成したポリシー"Raspi+自身の苗字+Policy"をクリックし、開く
(10)ポリシードキュメントの編集をクリックし、現在のポリシーを消去し、以下ポリシーを入力する
/******************************************************************************************************/
{
   "Version": "2012-10-17",
   "Statement": [{
         "Effect": "Allow",
         "Action": "iot:Connect",
         "Resource": "arn:aws:iot:us-east-1:745239123570:client/デバイス名"
      },
      {
         "Effect": "Allow",
         "Action": "iot:Publish",
         "Resource": [
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/update",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/delete",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/get"
         ]
      },
      {
         "Effect": "Allow",
         "Action": "iot:Receive",
         "Resource": [
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/update/accepted",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/delete/accepted",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/get/accepted",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/update/rejected",
            "arn:aws:iot:us-east-1:745239123570:topic/$aws/things/デバイス名/shadow/delete/rejected"
         ]
      },
      {
         "Effect": "Allow",
         "Action": "iot:Subscribe",
         "Resource": [
            "arn:aws:iot:us-east-1:745239123570:topicfilter/$aws/things/デバイス名/shadow/update/accepted",
            "arn:aws:iot:us-east-1:745239123570:topicfilter/$aws/things/デバイス名/shadow/delete/accepted",
            "arn:aws:iot:us-east-1:745239123570:topicfilter/$aws/things/デバイス名/shadow/get/accepted",
            "arn:aws:iot:us-east-1:745239123570:topicfilter/$aws/things/デバイス名/shadow/update/rejected",
            "arn:aws:iot:us-east-1:745239123570:topicfilter/$aws/things/デバイス名/shadow/delete/rejected"
         ]
      },
      {
         "Effect": "Allow",
         "Action": [
            "iot:GetThingShadow",
            "iot:UpdateThingShadow",
            "iot:DeleteThingShadow"
         ],
         "Resource": "arn:aws:iot:us-east-1:745239123570:thing/デバイス名"

      }
   ]
}
/******************************************************************************************************/
(11)入力したポリシーを編集する
　リージョンコード、アカウントコードはaws:us-east-1、745239123570そのままでOK
　デバイス名をRaspi+自身の苗字に変更する（15か所）。　例　RaspiHashimoto
(12)"新しいバージョンとして保存"をクリックして保存する
　構文に間違いがあるとエラー表示される。成功表示を確認する
(13) AWS IoT モノ、証明書、およびプライベートキーの作成を行う
　AWS IoTウィンドウで管理→モノを選択
　登録をクリックし、"AWS IoT モノを作成する" ページで、"単一のモノを作成する"を選択する
　名前にRaspi+自身の苗字を入力する。　例　RaspiHashimoto
　他は入力しないで次へをクリック
(14)"証明書を作成"をクリック
　証明書、およびプライベートキーはこのタイミングでしかダウンロード出来ないので注意
　証明書、パブリックキー、プライベートキーそれぞれをダウンロード
(15)そのまま、そのページでサーバー認証用のCA証明書をダウロードする
　AWS IoT のルート CA	ダウンロードをクリックすると以下URLにジャンプ
　　https://docs.aws.amazon.com/ja_jp/iot/latest/developerguide/server-authentication.html?icmpid=docs_iot_console#server-authentication-certs
　　RSA 2048 ビットキー:Amazon Root CA 1を右クリックし、名前を付けてリンク先を保存を選択
　　　AmazonRootCA1.pemという名前で保存される
　　サーバー認証用の CA 証明書（認証局証明書、いわゆるルート証明書）のページは閉じる
(16)証明書、パブリックキー、プライベートキーのページに戻り、有効化ボタンを押下
(17)"ポリシーをアタッチ"をクリック
(18)先に作ったポリシー"Raspi+自身の苗字+Policy"のチェックボックスにチェックを入れ、"モノの登録"をクリック
　これでモノの登録は完了。ラズパイ側の操作にうつる

(19)先にダウンロードした証明書、パブリックキー、プライベートキー、CA証明書の4ファイルを以下にフォルダにコピーする
  AWS/1_SensorMonitor
(20)VS Codeを開いて、1_SensorMonitorをフォルダとして開く
(21)ターミナルを開いて必要ライブラリのインストールを行う
$ ./AwsIoTPythonSdk_install.sh
(22)1_SensorMonitor.pyを以下のように編集する
　16行目　証明書ファイル名(拡張子crt)               ->  証明書のファイル名。 　　　　　例　74cadb81af-certificate.pem.crt
　17行目　プライベートキーファイル名(拡張子key)     -> プライベートキーファイル名。　　例　74cadb81af-private.pem.key
　19行目　デバイス名                                -> デバイス名　Raspi+自身の苗字。　例　RaspiHashimoto
　20行目　デバイス名                                -> デバイス名　Raspi+自身の苗字。　例　RaspiHashimoto

　参考
　14行目にはカスタムエンドポイント、15行目にはCA証明書の記載が必要。ただし、共通なのでサンプルコードには記載ずみ。
　　カスタムエンドポイントはAWS IoTウィンドウで管理→モノを選択後、相互作用タブを開くと以下のように3行目に記載されている
　　　　/************************************************************************************/
　　　　HTTPS
　　　　　この Rest API エンドポイントを使用して Thing Shadow を更新します。 詳細はこちら
　　　　　a36ljqkeccaktx-ats.iot.us-east-1.amazonaws.com
　　　　/************************************************************************************/
　　CA証明書は先に以下URLより入手したRSA 2048 ビットキー:Amazon Root CA 1である
　　　https://docs.aws.amazon.com/ja_jp/iot/latest/developerguide/server-authentication.html?icmpid=docs_iot_console#server-authentication-certs

(23)Sense HAT Emulatorを開く
　左上ラズパイアイコン->プログラミング->Sense HAT Emulator
(24)VS Code上の1_SensorMonitor.pyを実行
　5秒毎にAWSに温度、湿度をアップデートするログが表示される
　確認を終了したら処理を終了させる。ターミナル上でctrl+c
　サーバー側で受け取ったデータでどのようにアクションするか設置していく
　AWS側の設定に戻る

(25)トピックとサブスクリプションの作成
　トピック　　　　　　　配信対象をグルーピングし、配信対象に一斉に通知を配信するための機能。プロトコルのタイプ（FIFO、スタンダード選ぶだけ）
　サブスクリプション　　作成したトピックと配信対象のエンドポイントを紐づけるデータ。プロトコルの詳細を決定（HTTP、SMS、Eメール、）
　パブリッシュ　　　　　サブスクリプションに従って通知を発信すること

　以下URLにアクセス
　https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topics
　"トピックの作成"をクリック
　スタンダードを選択し、名前、表示名を以下のように入力
　　名前　　Raspi+自身の苗字+Topic　　　　　　　例　RaspiHashimotoTopic
　　表示名　Raspi+自身の苗字+スペースTopic　　　例　RaspiHashimoto Topic
　"トピックの作成"をクリック

　トピックページを表示するので、"サブスクリプションの作成"をクリック
　プロトコル欄でEメールを選択
　エンドポイント欄に現在受信できるメールアドレスを入力する。会社のメールアドレスでも問題ない。
　上記登録したメールアドレスにサブスクリプション承認のメールがくるので、メール内のConfirm Subscriptionをクリック
　
　これでトピックとサブスクリプションの作成は完了

(26)AWS IoT ルールを作成する
　ラズパイからサーバに送信する湿度が50%以下になったらアラートメールを出す仕様にする
　以下URLを開く。（または、すでに開いているAWS IoTに戻る）
　　https://console.aws.amazon.com/iot/home?region=us-east-1#/

　左ウィンドウの"ACT"をクリックし、ツリーが開いたところで"ルール"をクリックする
　ルールの作成をクリック
　名前を以下のように入力する
　　Raspi+自身の苗字+Rule　　　　　　　例　RaspiHashimotoRule
　説明欄は適当に以下入力する
　　ラズパイから温度、湿度データを受信したときに実行するルール
　ルールクエリステートメントに以下を入力する。デバイス名はRaspi+自身の苗字（例 RaspiHashimoto)に変えること
　　SELECT * FROM '$aws/things/デバイス名/shadow/update/accepted' WHERE state.reported.moisture < 50

　　state.reported.moistureは湿度データ。データ構造はラズパイ側のプログラムが定義している
　　　state _ reported __  tempature
                        |_ moisture
　　　湿度が50度以下になったらアクションを実行するというルールになる
　次にアクションを登録する。"アクションの追加"をクリック
　"SNS プッシュ通知としてメッセージを送信する"を選択し、"アクションの設定"をクリック
　SNSターゲットで先に作成したトピックを選択
　メッセージ形式でRAWを選択
　ロールを新規作成。名前は以下のようにする
　　Raspi+自身の苗字+Role　例　RaspiHashimotoRole

　これでルール設定は完了。ラズパイ側の操作にうつる

(27)Sense HAT Emulatorを開く
　左上ラズパイアイコン->プログラミング->Sense HAT Emulator
(28)VS Code上の1_SensorMonitor.pyを実行
　5秒毎にAWSに温度、湿度をアップデートするログが表示される
　Sense HAT Emulatorの湿度を50%以下にすると登録されたメールアドレスにアラートメールが送信される
　メール受信を確認して終了


２１．VSCodeからGitを使ってみる
コード管理はGit使いたい
参考
https://backlog.com/ja/git-tutorial/
Githubアカウントがないのでまずはローカルレポジトリを使う
VSCodeにもGit関連のExtensionを追加
(1)Git Hisotry     Gitのコミット履歴を見やすく表示することができる
(2)GitLens         ブランチ一覧、コミットの一覧、差分を表示することができる（次世代はGit Blame）
git使ってみる
VSCodeでWorkフォルダを開く
ターミナルで
$ git --verison
git version 2.20.1
gitのバージョンは2.20.1であることがわかる
Gitリポジトリを作成する
$ git init
現在の状態を確認する
$ git status
ファイルをインデックスに追加する
$ git add .
ローカルリポジトリにコミットする -mはコメントオプション
$ git commit -m "add new files"
現在の状態を確認する
$ git status
ローカルレポジトリの修正を元に戻す
$ git checkout [ファイル名]
ファイル編集し、インデックス追加、コミット、ステータス確認を実施する

